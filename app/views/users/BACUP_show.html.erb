<%#### USERS/show ########### %>
<!-- <body ng-app="ngToggle"> -->
<div ng-app="ngToggle"><%# can I call this something other than body and have it still pick up the app? %>
<!-- <div ng-controller="AppCtrl"> -->
  <!-- <div ng-controller="List" class="colleague_attribs">    -->

  <div class="wrapper body">
    <div class="container">
      <div class="row">
        <%= render "users/signed_in_sidebar" %>
        <div class="col-md-8">
          <!-- this is the main section -->
          <% user = set_user(params) %><%##User.find_by(id: params[:id]) %> 
          <h4><%=user.name%></h4>
          <div class="well well-sm">


            <p><b><%= user.name %></b> | <%=user.email %></p>
            <ul>
            
              <% @users_nicejob.each do |fb| %>
                <%= render "users/feedback_item", :comment => fb.attribute.attribute_name, :category => "nicejob", :feedback => fb  %>
              <% end %>
              <% @users_greatat.each do |fb| %>
                <%= render "users/feedback_item", :comment => fb.attribute.attribute_name, :category => "greatat", :feedback => fb  %>
              <% end %>
              <% @users_thanks.each do |fb| %>
                <%= render "users/feedback_item", :comment => fb.attribute.attribute_name, :category => "thanks", :feedback => fb  %>
              <% end %>   
              <%= render "users/one_button", :fb => @users_workon, :category => "workon" %>
              <%= render "users/one_button", :fb => @users_alert, :category => "alert" %>
            </ul>

            </div>
            <div ng-controller="FbController">

              <div class="well well-sm" id="colleaguedDisplay">
                Give feedback for <b><%= @user.name %></b> anonymously
                <hr style="border: none; "/>
                <%= render "/users/button_entry", :user => user %>  <%# ALL INPUT BUTTONS %>
                <hr style="border: none; "/>


                <script type="text/javascript">
                    function GetSelected (selectTag) {
                        var selIndexes = "";

                        for (var i = 0; i < selectTag.options.length; i++) {
                            var optionTag = selectTag.options[i];
                            if (optionTag.selected) {
                                if (selIndexes.length > 0)
                                    selIndexes += "<br>";
                                selIndexes += optionTag.value;
                            }
                        }

                        var info = document.getElementById ("queue");
                        if (selIndexes.length > 0) {
                            info.innerHTML = selIndexes;
                        }
                        else {
                            info.innerHTML = "There is no selected option";
                        }

                        //jquery from http://stackoverflow.com/questions/4959770/how-to-pass-a-javascript-variable-into-a-erb-code-in-a-js-view
                        // $(document).ready(function(){
                        //   $("#selected_attribs").val(selIndexes);
                        // });
                    }
                </script>


                Nice job:
                <br />

                <br /><b>Feedback queue:</b><br />

                <span id="queue" ></span> <%# js puts selected items here %>

                <%#= selected_attribs %>

                <%= form_for(@feedback) do |f| %>
                  <%= render '/shared/error_messages', object: f.object %>
                  <%#= f.text_field :body %>
                  <%#= f.text_field :attribute =>Attribute.find_by(attribute_name: "selected_attribs") %>
                  <%= f.hidden_field :attribute, value: @att%>
                  <%= f.submit "Submit", class: "btn btn-large btn-primary", style:"float:left;" %>
                <% end %>                

            <!-- </body> -->




              </div>

            </div>


            <% puts "@users_jobs.size: #{@users_jobs.size}"%>
            <% puts "@users_for_this_job.size: #{@users_for_this_job.size}"%>
          <% if @users_jobs.size.to_i > 0 || @users_for_this_job.size.to_i >0 %>
            <div class="well well-sm"> 
              <% if @users_jobs.size.to_i > 0 %>
                <p><b><%=current_user.company.name %></b> employees have said that: </p>
                  <ul>
                  <% @users_jobs.reverse_each do |job| %>
                    <li><b><%=user.name%></b> would do well in a role like <b><%=job.job_holder.name %></b> has now</li>
                  <% end %>
                </ul>
              <% end %>
              <% if @users_for_this_job.size.to_i > 0 %>
                <ul>
                  <% @users_for_this_job.reverse_each do |job| %>
                    <li><b><%=job.subject.name %></b> would do well in a role like <b><%=user.name%></b> has now</li>
                  <% end %>
                </ul>
              <% end %>
            </div>
          <% else %>
            <div class="well well-sm"> 
              No job recommendations for <b> <%=user.name%></b> yet
            </div>
          <% end %>


          <div class="well well-sm"> <%# job input %>
            <p><b><%= user.name %></b> would do well in a role like that of:</p>
            <%#= form_for @job, :remote => true do |f| %>
            <%= form_for @job do |f| %>
              <%= f.text_field :job_holder, placeholder: "Enter name of a colleague at #{current_user.company.name}" %>
              <%= f.hidden_field :subject, :value => user.id %>

              <!-- or  -->
              <%#= f.text_field :email %>
              <br>
              Your input will be anonymous.  <br>
              <%#= f.hidden_field :subject, :value => current_user.id %>
              <div style="float:left;">
                <%= f.submit "Submit", class: "btn btn-large btn-primary" %>
              </div><br \><br \>
            <% end %>
          </div>

        </div>
      </div>
    </div>
  </div>
</div>
</div>


